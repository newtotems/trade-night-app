<div class="flex justify-center mb-6">
  <div class="inline-flex rounded-md shadow-sm" role="group">
    <button type="button" class="filter-button px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-blue-500 dark:focus:text-white" data-filter="all">
      All
    </button>
    {% if eventTypes %}
      <script>
        console.log('Event Types:', {{ eventTypes | dump | safe }});
      </script>
      {% for eventType in eventTypes %}
        <button type="button" class="filter-button px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-blue-500 dark:focus:text-white" data-filter="eventType{{ eventType.eventTypeId }}">
          {{ eventType.name }}
        </button>
      {% endfor %}
    {% else %}
      <p>No event types found.</p>
    {% endif %}
  </div>
</div>

<!-- Grouped buttons for event subtypes -->
<div class="flex flex-col items-center mt-6">
  {% set groupedSubTypes = {} %}
  {% for subType in eventSubTypes %}
    {% set eventTypeId = subType.eventTypeId | string %}
    {% if not groupedSubTypes[eventTypeId] %}
      {% set groupedSubTypes = groupedSubTypes | setAttribute(eventTypeId, []) %}
    {% endif %}
    {% set _ = groupedSubTypes[eventTypeId].push(subType) %}
  {% endfor %}

  {% for eventTypeId, subTypes in groupedSubTypes %}
    <div class="subtype-group inline-flex rounded-md shadow-sm mb-2 filtered eventType{{ eventTypeId }}" role="group" style="display: none;">
      {% for subType in subTypes %}
        <button type="button" class="subtype-button px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-blue-500 dark:focus:text-white" data-subtype="{{ subType.eventSubTypeId }}">
          {{ subType.name }}
        </button>
      {% endfor %}
    </div>
  {% endfor %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const filterButtons = document.querySelectorAll('.filter-button');
  const filteredItems = document.querySelectorAll('.filtered');
  const subtypeGroups = document.querySelectorAll('.subtype-group');

  // Function to apply filtering
  function applyFilter(filter) {
    if (filter === 'all') {
      filteredItems.forEach(item => {
        if (!item.classList.contains('subtype-group')) {
          item.style.display = '';
        }
      });
      // Hide all subtype groups when 'all' is selected
      subtypeGroups.forEach(group => {
        group.style.display = 'none';
      });
    } else {
      filteredItems.forEach(item => {
        if (item.classList.contains(filter)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
      subtypeGroups.forEach(group => {
        if (group.classList.contains(filter)) {
          group.style.display = '';
        } else {
          group.style.display = 'none';
        }
      });
    }
  }

  // Add click event listeners to filter buttons
  filterButtons.forEach(button => {
    button.addEventListener('click', function() {
      const filter = this.getAttribute('data-filter');
      applyFilter(filter);
    });
  });

  // Apply 'all' filter on initial page load
  applyFilter('all');
});
</script>