---
pagination:
  data: eventlist
  size: 1
  alias: eventtrade
permalink: "/event/trade/{{ eventtrade.id }}/"
layout: layouts/base-trade.njk
---

<div class="w-screen h-screen relative">
  <div class="absolute inset-0 z-10">
    <div class="absolute top-0 left-0 right-0 text-center py-4 z-20">
      <h1 class="text-3xl font-bold"><a href="/" class="text-white hover:text-gray-200">Trade Night</a></h1>
    </div>
    <div class="flex flex-col md:flex-row h-full">
      <div class="w-full h-1/2 md:w-1/2 md:h-screen flex items-center justify-center relative">
        <video id="cameraFeed" class="absolute inset-0 w-full h-full object-cover z-0" autoplay playsinline></video>
        <button id="switchCamera" class="absolute top-4 right-4 p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition duration-300 z-10">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-switch-camera">
            <path d="M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5"/>
            <path d="M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5"/>
            <circle cx="12" cy="12" r="3"/>
            <path d="m18 22-3-3 3-3"/>
            <path d="m6 2 3 3-3 3"/>
          </svg>
        </button>
        <div class="relative">
          <div class="w-64 h-96 border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center">
          </div>
          <button class="absolute left-1/2 transform -translate-x-1/2 top-full mt-[5px] p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition duration-300">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-circle-plus">
              <circle cx="12" cy="12" r="10"/>
              <path d="M8 12h8"/>
              <path d="M12 8v8"/>
            </svg>
          </button>
        </div>
        <div class="absolute bottom-4 left-4 md:right-1/2 bg-gray-200 rounded-lg p-4">
          <p class="text-center">Trade Details</p>
        </div>
      </div>
      <div class="w-full h-1/2 md:w-1/2 md:h-screen flex items-center justify-center">
        <div class="w-64 h-96 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center bg-transparent">
          <p class="text-white text-center px-4 py-2">Place cards here to add to the trade</p>
        </div>
         <div class="absolute bottom-4 right-4 md:left-1/2 md:w-[calc(50%-2rem)] bg-gray-200 rounded-lg p-4">
          <p class="text-center">Trade Details</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let currentFacingMode = 'environment';
  let currentStream = null;

  async function startCamera(facingMode = 'environment') {
    try {
      if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
      }

      const constraints = {
        video: {
          width: { ideal: 1280 },
          height: { ideal: 720 },
          facingMode: { ideal: facingMode }
        }
      };
      
      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      const videoElement = document.getElementById('cameraFeed');
      videoElement.srcObject = stream;
      await videoElement.play();
      currentStream = stream;
      currentFacingMode = facingMode;
      adjustVideoSize();
    } catch (error) {
      console.error('Error accessing camera:', error);
      alert('Failed to switch camera. Your device might not support changing cameras or the requested camera is not available.');
      // Attempt to fall back to the previous camera
      if (facingMode !== currentFacingMode) {
        startCamera(currentFacingMode);
      }
    }
  }

  function adjustVideoSize() {
    const video = document.getElementById('cameraFeed');
    const container = video.parentElement;
    const aspectRatio = video.videoWidth / video.videoHeight;
    
    if (container.offsetWidth / container.offsetHeight > aspectRatio) {
      video.style.width = '100%';
      video.style.height = 'auto';
    } else {
      video.style.width = 'auto';
      video.style.height = '100%';
    }
  }

  function switchCamera() {
    const newFacingMode = currentFacingMode === 'environment' ? 'user' : 'environment';
    startCamera(newFacingMode);
  }

  document.addEventListener('DOMContentLoaded', function() {
    startCamera();
    window.addEventListener('resize', adjustVideoSize);
    document.getElementById('switchCamera').addEventListener('click', switchCamera);
  });

  document.getElementById('cameraFeed').addEventListener('loadedmetadata', adjustVideoSize);
</script>