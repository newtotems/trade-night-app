---
pagination:
  data: eventlist
  size: 1
  alias: eventtrade
permalink: "/event/trade/{{ eventtrade.id }}/"
layout: layouts/base-trade.njk
---

<div class="w-screen h-screen flex flex-col relative">
  <a href="/" class="absolute top-4 left-1/2 transform -translate-x-1/2 z-20">
    <h1 class="text-4xl font-bold text-white">Trade Night</h1>
  </a>

  <button id="fullscreenButton" class="absolute top-4 right-4 text-white p-2 rounded-full shadow-lg z-10 hover:bg-white hover:bg-opacity-20 transition-colors duration-200">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4" />
    </svg>
  </button>

  <div class="flex flex-col md:flex-row flex-grow">
    <div id="tradepartner" class="w-full h-1/2 md:w-1/2 md:h-full bg-gray-800 flex flex-col relative order-1 md:order-1 overflow-hidden">
      <svg class="absolute top-4 left-4 w-8 h-8 text-gray-300 z-10" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect x="0.62854" y="0.359985" width="15" height="15" rx="7.5" fill="white"></rect>
        <path d="M8.12421 7.20374C9.21151 7.20374 10.093 6.32229 10.093 5.23499C10.093 4.14767 9.21151 3.26624 8.12421 3.26624C7.0369 3.26624 6.15546 4.14767 6.15546 5.23499C6.15546 6.32229 7.0369 7.20374 8.12421 7.20374Z" fill="currentColor"></path>
        <path d="M11.818 10.5975C10.2992 12.6412 7.42106 13.0631 5.37731 11.5537C5.01171 11.2818 4.69296 10.9631 4.42107 10.5975C4.28982 10.4006 4.27107 10.1475 4.37419 9.94123L4.51482 9.65059C4.84296 8.95684 5.53671 8.51624 6.30546 8.51624H9.95231C10.7023 8.51624 11.3867 8.94749 11.7242 9.62249L11.8742 9.93184C11.968 10.1475 11.9586 10.4006 11.818 10.5975Z" fill="currentColor"></path>
      </svg>
      <div class="flex-grow flex items-center justify-center">
        <div class="text-center">
          <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-white mb-4"></div>
          <p class="text-white text-lg">Waiting on trade partner...</p>
        </div>
      </div>
      
      <div class="h-[100px] relative z-10 -mt-12 transform translate-y-1/2 ">
        <div class="absolute bottom-0 left-0 right-0 flex justify-around items-end w-full overflow-hidden" id="tradeImagesContainer0">
          <!-- Initially empty -->
        </div>
      </div>
    </div>

    <div id="trader" class="w-full h-1/2 md:w-1/2 md:h-full bg-gray-100 flex flex-col relative order-2 md:order-2 overflow-hidden">
     
      <video id="cameraFeed" class="absolute inset-0 w-full h-full object-cover z-0" autoplay playsinline></video>
      
      <div class="flex-grow flex items-center justify-center relative z-100">
        <div class="w-48 h-64 border-2 border-white border-dashed flex items-center justify-center relative">
          <button id="captureButton" class="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1/2 w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center shadow-lg hover:bg-blue-600 transition-colors duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
          </button>
        </div>
      </div>
      
       <div class="h-[100px] relative z-10 -mt-12 transform translate-y-1/2 ">
        <div class="absolute bottom-0 left-0 right-0 flex justify-around items-end w-full overflow-hidden" id="tradeImagesContainer">
          <!-- Initially empty -->
        </div>
      </div>
    </div>
  </div>

  <!-- Gauge Wrapper -->
  <div class="absolute inset-x-0 bottom-0 flex justify-center z-20"> <!-- Added wrapper for positioning -->
    <div class="relative size-40"> <!-- Inner div for gauge -->
      <svg class="size-full rotate-180" viewBox="0 0 36 36" xmlns="http://www.w3.org/2000/svg">
        <!-- Background Circle (Gauge) -->
        <circle cx="18" cy="18" r="16" fill="none" class="stroke-current text-gray-200 dark:text-neutral-700" stroke-width="1" stroke-dasharray="50 100" stroke-linecap="round"></circle>

        <!-- Gauge Progress -->
        <circle cx="18" cy="18" r="16" fill="none" class="stroke-current text-blue-600 dark:text-blue-500" stroke-width="1.5" stroke-dasharray="37.5 100" stroke-linecap="round"></circle>
      </svg>

      <!-- Value Text -->
      <div class="absolute bottom-12 left-1/2 transform -translate-x-1/2 text-center">
        <span class="text-3xl font-bold text-blue-600 dark:text-blue-500">75</span>
        <span class="text-sm text-blue-600 dark:text-blue-500 block">Score</span>
      </div>
    </div>
  </div>
  <!-- End Gauge Wrapper -->

  <div id="tradedetail" class="w-full h-[85px] md:h-[120px] bg-gray-700 flex">
    <div class="w-[35%] text-white flex flex-col items-center justify-center h-full">
      <p>Receiving</p>
      <p>£134.56</p>
      <p>Comp value</p>
    </div>
    <div class="w-[30%] flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
      </svg>
      <button class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg text-lg md:text-xl lg:text-2xl shadow-lg w-full">
        Trade
      </button>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
      </svg>
    </div>
    <div class="w-[35%] text-white flex flex-col items-center justify-center h-full">
      <p>Trading</p>
      <p>£1456.33</p>
      <p>Comp value</p>
    </div>
  </div>
</div>

<!-- Add this template somewhere in your main HTML -->
<template id="modalTemplate">
  <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 modal-container">
    <div class="bg-white p-4 rounded-lg relative w-full md:max-w-lg max-w-[90%] md:max-w-[95%]">
      <button class="absolute top-2 right-2 text-2xl font-bold modal-close-button">&times;</button>
      <h2 class="text-xl font-bold mb-4 modal-title">Captured Image</h2>
      <div class="flex mb-4">
        <div class="w-1/2 pr-2">
          <img class="w-full h-auto modal-image" src="" alt="Captured Image">
        </div>
        <div class="w-1/2 pl-2 flex items-center justify-center">
          <p class="text-lg font-bold">List</p>
        </div>
      </div>
      <button id="addToTradeButton" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">Add to Trade</button>
    </div>
  </div>
</template>

<script>
function toggleFullScreen() {
  if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {
    if (document.documentElement.requestFullscreen) {
      document.documentElement.requestFullscreen();
    } else if (document.documentElement.msRequestFullscreen) {
      document.documentElement.msRequestFullscreen();
    } else if (document.documentElement.mozRequestFullScreen) {
      document.documentElement.mozRequestFullScreen();
    } else if (document.documentElement.webkitRequestFullscreen) {
      document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
    }
  } else {
    if (document.exitFullscreen) {
      document.exitFullscreen();
    } else if (document.msExitFullscreen) {
      document.msExitFullscreen();
    } else if (document.mozCancelFullScreen) {
      document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
      document.webkitExitFullscreen();
    }
  }
}

document.addEventListener('DOMContentLoaded', function() {
  const fullscreenButton = document.getElementById('fullscreenButton');
  fullscreenButton.addEventListener('click', toggleFullScreen);

  // Camera feed setup
  const cameraFeed = document.getElementById('cameraFeed');

  async function setupCamera() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: 'environment' }
      });
      cameraFeed.srcObject = stream;
    } catch (error) {
      console.error('Error accessing camera:', error);
    }
  }

  setupCamera();

  const captureButton = document.getElementById('captureButton');
  const dashedBox = document.querySelector('.border-dashed');

  captureButton.addEventListener('click', function() {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    const boxRect = dashedBox.getBoundingClientRect();
    const videoRect = cameraFeed.getBoundingClientRect();

    // Set canvas size to match the dashed box
    canvas.width = boxRect.width;
    canvas.height = boxRect.height;

    // Calculate the scaling factors
    const scaleX = cameraFeed.videoWidth / videoRect.width;
    const scaleY = cameraFeed.videoHeight / videoRect.height;

    // Calculate the source rectangle
    const sx = (boxRect.left - videoRect.left) * scaleX;
    const sy = (boxRect.top - videoRect.top) * scaleY;
    const sWidth = boxRect.width * scaleX;
    const sHeight = boxRect.height * scaleY;

    // Draw the image on the canvas, maintaining aspect ratio
    context.drawImage(cameraFeed, sx, sy, sWidth, sHeight, 0, 0, canvas.width, canvas.height);

    // Create a new image with the correct aspect ratio
    const img = new Image();
    img.onload = function() {
      const aspectRatio = img.width / img.height;
      let newWidth = canvas.width;
      let newHeight = canvas.height;

      if (canvas.width / canvas.height > aspectRatio) {
        newWidth = canvas.height * aspectRatio;
      } else {
        newHeight = canvas.width / aspectRatio;
      }

      const newCanvas = document.createElement('canvas');
      newCanvas.width = newWidth;
      newCanvas.height = newHeight;
      const newContext = newCanvas.getContext('2d');

      newContext.drawImage(img, 0, 0, newWidth, newHeight);

      newCanvas.toBlob(function(blob) {
        const url = URL.createObjectURL(blob);
        
        // Get the template
        const template = document.getElementById('modalTemplate');
        const modal = template.content.cloneNode(true);
        
        // Set the image source
        const imgElement = modal.querySelector('.modal-image');
        imgElement.src = url;
        
        // Create a container for the modal
        const modalContainer = document.createElement('div');
        modalContainer.appendChild(modal);
        
        // Add modal to body
        document.body.appendChild(modalContainer);

        // Function to close and clear the modal
        function closeAndClearModal() {
          document.body.removeChild(modalContainer);
          modalContainer.innerHTML = '';
        }

        // Set the close button functionality
        const closeButton = modalContainer.querySelector('.modal-close-button');
        closeButton.onclick = closeAndClearModal;

        // Add to trade functionality
        const addToTradeButton = modalContainer.querySelector('#addToTradeButton');
        const tradeImagesContainer = document.getElementById('tradeImagesContainer');
        addToTradeButton.addEventListener('click', async function() {
          if (tradeImagesContainer.children.length < 6) {
            const tradeDiv = document.createElement('div');
            tradeDiv.className = 'w-1/6 p-2 pt-0';

            // Fetch the image from the Pokémon TCG API
            const response = await fetch('https://api.pokemontcg.io/v2/cards?q=name:pikachu');
            const data = await response.json();
            const pokemonImageUrl = data.data[0].images.small; // Get the small image URL

            tradeDiv.innerHTML = `
              <div class="relative rounded-lg aspect-[2/3] max-h-[200px] overflow-hidden">
                <img src="${pokemonImageUrl}" alt="Captured Image" class="w-full h-full object-cover">
                <button class="absolute top-1 right-1 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center" onclick="removeImage(this)">×</button>
              </div>
            `;
            tradeImagesContainer.appendChild(tradeDiv);
            if (tradeImagesContainer.children.length >= 6) {
              addToTradeButton.disabled = true;
            }
          }
          closeAndClearModal(); // Close and clear the modal after adding to trade
        });
      }, 'image/png');
    };
    img.src = canvas.toDataURL('image/png');
  });
});

// Add this function to remove images
function removeImage(button) {
  const tradeDiv = button.parentElement.parentElement; // Get the parent div of the image
  tradeDiv.remove(); // Remove the image div
  const tradeImagesContainer = document.getElementById('tradeImagesContainer');
  if (tradeImagesContainer.children.length < 6) {
    document.getElementById('addToTradeButton').disabled = false; // Enable the button if less than 6 images
  }
}
</script>


